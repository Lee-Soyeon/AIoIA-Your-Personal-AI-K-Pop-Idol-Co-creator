
import { GoogleGenAI, Modality, Chat, Type } from "@google/genai";
import type { GeneratedImage } from '../types';

// Fix: Initialize the Google Gemini API client using the API key from environment variables.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Initializes a new chat session with the AI Idol persona.
 */
export function createChat(): Chat {
  return ai.chats.create({
    model: 'gemini-2.5-flash',
    config: {
      systemInstruction: `You are a friendly and cute AI Idol assistant named Gem. Your goal is to help the user co-create special photocards.
- The user has just selected an idol to start with. Your first photocard is already visible in the chat.
- Your first task is to ask them what kind of edits they'd like to make to it.
- To edit an image, the user just needs to describe the change. They do not need to re-upload the image.
- Keep your responses short, cheerful, and engaging, using plenty of emojis like âœ¨, ðŸ’–, and ðŸ˜Š.
- Do not mention that you are a language model. You are Gem, the AI Idol!`,
    },
  });
}

/**
 * Generates an initial image for the AI Idol using a text prompt.
 * @param prompt The detailed description of the idol to generate.
 * @returns A promise that resolves to the Base64 encoded image string.
 */
export async function generateInitialImage(prompt: string): Promise<string> {
  try {
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '3:4', // Ideal for photocards
        },
    });

    if (!response.generatedImages || response.generatedImages.length === 0) {
        throw new Error("No image was generated by the API. The prompt might have been rejected.");
    }
    
    const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
    return base64ImageBytes;

  } catch (error) {
    console.error("Error calling Gemini Image Generation API:", error);
    if (error instanceof Error) {
       throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred while communicating with the Gemini API.");
  }
}


export async function editImage(
  base64ImageData: string,
  mimeType: string,
  prompt: string
): Promise<GeneratedImage> {
  // Add a directive to ensure the model understands its role is to edit, not just chat.
  const fullPrompt = `You are an expert AI photocard editor. Your task is to apply the user's request to the provided image and generate a new, edited version. You MUST return an edited image. Do not just describe the change, perform it. The user's request is: "${prompt}"`;
  
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: mimeType,
            },
          },
          {
            text: fullPrompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    if (!response.candidates || response.candidates.length === 0) {
      throw new Error("No response candidates found from the API.");
    }

    const result: GeneratedImage = {
      base64: null,
      text: null,
    };
    
    for (const part of response.candidates[0].content.parts) {
      if (part.text) {
        result.text = part.text;
      } else if (part.inlineData) {
        result.base64 = part.inlineData.data;
      }
    }
    
    if (!result.base64) {
      // Sometimes the model might just respond with text if the prompt is ambiguous.
      // We'll pass the text back to the user in this case.
      result.text = result.text ?? "The AI didn't generate an image this time, try rephrasing your request!";
      return result;
    }

    return result;

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
       throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred while communicating with the Gemini API.");
  }
}

/**
 * Generates creative edit suggestions based on the user's last prompt.
 * @param lastUserPrompt The last edit prompt from the user.
 * @returns A promise that resolves to an array of suggestion strings.
 */
export async function getEditSuggestions(lastUserPrompt: string): Promise<string[]> {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: `Based on the user's last edit request "${lastUserPrompt}", what are some creative and fun edits they could try next on their AI idol photocard?`,
      config: {
        systemInstruction: `You are a creative assistant for an AI photocard editor. Your task is to suggest 3-4 short, fun, and creative edits. The suggestions should be phrased as commands a user would give, like "Add cat ears" or "Change hair to blue". You must respond with only a JSON array of strings. For example: ["Make the background a cityscape", "Add a leather jacket", "Give them a confident smirk"]`,
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.ARRAY,
          items: {
            type: Type.STRING,
            description: "A creative edit suggestion phrased as a command.",
          }
        },
      },
    });

    const jsonStr = response.text.trim();
    const suggestions = JSON.parse(jsonStr);
    
    if (Array.isArray(suggestions)) {
        // Ensure all items are strings, just in case
        return suggestions.filter(s => typeof s === 'string').slice(0, 4);
    }
    
    return [];
  } catch (error) {
    console.error("Error getting edit suggestions:", error);
    // Don't throw, just return an empty array so the app doesn't break
    return [];
  }
}
